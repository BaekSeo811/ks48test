<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ksmart.mybatis.mapper.MemberMapper">
	
	<!-- ResultMap : DTO와 DB와 조회된 결과 맵핑 객체 -->
	<resultMap type="MemberLevel" id="memberLevelResultMap">
		<!-- pk == id  -->
		<id property="levelNum" column="level_num" />
		<!-- pk 제외한 모든 컬럼 == result -->
		<result property="levelName" 	column="level_name"/>
		<result property="levelRegDate" column="level_reg_date"/>
	</resultMap>
	
	<resultMap type="Member" id="memberResultMap">
		<id 	property="memberId" 		column="m_id"/>
		<result property="memberPw" 		column="m_pw"/>
		<result property="memberName" 		column="m_name"/>
		<result property="memberLevel" 		column="m_level"/>
		<result property="memberLevelName" 	column="m_level_name"/>
		<result property="memberEmail" 		column="m_email"/>
		<result property="memberAddr" 		column="m_addr"/>
		<result property="memberRegDate" 	column="m_reg_date"/>
		
		<!-- 고급매핑 1:N collection ex:) List<Goods> goodsList -->
		<collection property="goodsList" javaType="list" ofType="Goods">
			<!-- pk == id  -->
			<id property="goodsCode" 			column="g_code" />
			<!-- pk 제외한 모든 컬럼 == result -->
			<result property="goodsName" 		column="g_name"/>
			<result property="goodsPrice" 		column="g_price"/>
			<result property="goodsSellerId" 	column="g_seller_id"/>
			<result property="goodsRegDate" 	column="g_reg_date"/>
		</collection>
	</resultMap>
	
	<!-- 판매자 현황 -->
	<select id="getSellerList" resultMap="memberResultMap">
		/* 판매자 현황 조회 */
		SELECT 
			m.m_id,
			m.m_pw,
			m.m_name,
			m.m_level,
			m.m_email,
			m.m_addr,
			m.m_reg_date,
			g.g_code, 
			g.g_name, 
			g.g_price, 
			g.g_seller_id, 
			g.g_reg_date
		FROM 
			tb_goods AS g
			INNER JOIN
			tb_member AS m 
			ON 
			g.g_seller_id = m.m_id
		ORDER BY m_id;
	</select>
	
	
	
	<!-- 검색조건에 따른 회원목록 조회 -->
	<select id="getMemberListBySearch" parameterType="String" resultMap="memberResultMap">
		/* 검색조건에 따른 회원목록 조회 */
		SELECT 
			m.m_id,
			m.m_pw,
			m.m_name,
			IFNULL(m.m_level, 0) 	AS m_level,
			l.level_name 			AS m_level_name,
			m.m_email,
			m.m_addr,
			m.m_reg_date	
		FROM 
			tb_member AS m
			INNER JOIN
			tb_member_level AS l
			ON 
			m.m_level = l.level_num
		<where>
			<if test="searchKey != null and searchKey != ''">
				${searchKey} LIKE CONCAT('%', #{searchValue}, '%');
			</if>
		</where>
	</select>
	
	<!-- 특정회원 탈퇴 -->
	<delete id="removeMemberById" parameterType="String">
		/* 특정회원 탈퇴 */
		DELETE  
		FROM 
			tb_member
		WHERE 
			m_id = #{memberId};
	</delete>
	
	<!-- 특정회원의 로그인 이력삭제 -->
	<delete id="removeLoginHistoryById" parameterType="String">
		/* 특정회원의 로그인 이력삭제 */
		DELETE  
		FROM 
			tb_login
		WHERE 
			login_id = #{memberId};
	</delete>
	
	<!-- 구매자가 구매한 이력삭제 -->
	<delete id="removeOrderByOrderId" parameterType="String">
		/* 구매자가 구매한 이력삭제 */
		DELETE  
		FROM 
			tb_order
		WHERE 
			o_id = #{orderId};
	</delete>
	
	<!-- 판매자 등록한 상품삭제 -->
	<delete id="removeGoodsById" parameterType="String">
		/* 판매자 등록한 상품삭제 */
		DELETE  
		FROM 
			tb_goods
		WHERE 
			g_seller_id = #{memberId};
	</delete>
	
	<!-- 판매자가 등록한 상품을 주문한 이력삭제 -->
	<delete id="removeOrderBySellerId" parameterType="String">
		/* 판매자가 등록한 상품을 주문한 이력삭제 */
		DELETE 
			o
		FROM
			tb_goods AS g
			INNER JOIN 
			tb_order AS o
			ON 
			g.g_code = o.o_g_code
		WHERE 
			g.g_seller_id = #{sellerId};
	</delete>
	
	
	<!-- Mybatis 동적SQL 구문 -->
	<!-- 동적SQL : if(조건문), choose(when, otherwise)(조건문), trim(where, set)(생성), foreach(반복문)  -->
	<!-- if, trim -->
	<!-- https://mybatis.org/mybatis-3/ko/dynamic-sql.html -->
	<!-- 특정회원 수정 -->
	<update id="modifyMember" parameterType="Member">
		UPDATE tb_member
		<set>
			<if test="memberPw != null and memberPw != ''">			
				m_pw = #{memberPw},
			</if>		
			<if test="memberName != null and memberName != ''">	
				m_name = #{memberName},
			</if>
			<if test="memberLevel != null and memberLevel != ''">	
				m_level = #{memberLevel},
			</if>
			<if test="memberEmail != null and memberEmail != ''">	
				m_email = #{memberEmail},
			</if>
			<if test="memberAddr != null and memberAddr != ''">	
				m_addr = #{memberAddr}
			</if>
		</set>	
		WHERE 
			m_id = #{memberId};
	</update>
		
	<!-- 특정회원 조회 -->
	<select id="getMemberInfoById" parameterType="String" resultMap="memberResultMap">
		/* 특정회원 조회 */
		SELECT 
			m.m_id,
			m.m_pw,
			m.m_name,
			IFNULL(m.m_level, 0) AS m_level,
			m.m_email,
			m.m_addr,
			m.m_reg_date	
		FROM 
			tb_member AS m
		WHERE 
			m.m_id = #{memberId};
	</select>
	
	<!-- 회원가입 -->
	<insert id="addMember" parameterType="Member">
		/* 회원가입 */
		INSERT INTO tb_member
		(m_id, m_pw, m_name, m_level, m_email, m_addr, m_reg_date)
		VALUES 
		(#{memberId}, #{memberPw}, #{memberName}, #{memberLevel}, #{memberEmail}, #{memberAddr}, CURDATE())
	</insert>
	
	<!-- 회원아이디 중복체크 -->
	<select id="idCheck" parameterType="String" resultType="boolean">
		/* 회원아이디 중복체크 */
		SELECT 
			count(m.m_id)
		FROM 
			tb_member AS m
		WHERE 
			m.m_id = #{memberId};
	</select>
	
	<!-- 회원 등급 조회 -->
	<select id="getMemberLevelList" resultMap="memberLevelResultMap">
		/* 회원등급조회 */
		SELECT
			l.level_num,
			l.level_name,
			l.level_reg_date
		FROM
			tb_member_level 	AS l;
	</select>
	
	<sql id="selectFragment">
	
	</sql>
	
	<!-- 회원 목록 조회 -->
	<select id="getMemberList" resultType="Member">
		/* 회원목록 조회 */
		SELECT
			m.m_id 					AS memberId,
			m.m_pw 					AS memberPw,
			m.m_name 				AS memberName,
			IFNULL(m.m_level, 0) 	AS memberLevel,
			l.level_name 			AS memberLevelName,
			m.m_email 				AS memberEmail,
			m.m_addr 				AS memberAddr,
			m.m_reg_date 			AS memberRegDate
		FROM
			tb_member as m
			INNER JOIN 
			tb_member_level as l
			ON 
			m.m_level = l.level_num
		ORDER BY memberId;
	</select>
</mapper>






